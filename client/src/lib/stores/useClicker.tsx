import { create } from "zustand";
import { formatDistanceToNow } from "date-fns";
import { ru } from "date-fns/locale";
import { artifacts, skins, treasureChests, expeditions } from "../gameData";

export type ClassType = "warrior" | "explorer" | "merchant";

// –¢–∏–ø—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
interface Skill {
  name: string;
  description: string;
  icon: string;
  level: number;
  maxLevel: number;
  getCurrentBonus: () => string;
  getNextBonus: () => string;
}

// –¢–∏–ø—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
interface Artifact {
  id: string;
  name: string;
  description: string;
  shortDescription?: string;
  icon: string;
  rarity: string;
  rarityClass: string;
  textClass: string;
  bonus: {
    type: string;
    value: number;
  };
}

interface Skin {
  id: string;
  name: string;
  description: string;
  shortDescription?: string;
  icon: string;
  rarity: string;
  rarityClass: string;
  textClass: string;
}

interface Relic {
  id: string;
  name: string;
  description: string;
  icon: string;
  rarity: string;
  rarityClass: string;
  textClass: string;
  effects: string[];
  level: number;
  bonus: {
    type: string;
    value: number;
  };
}

interface Expedition {
  id: string;
  name: string;
  description: string;
  icon: string;
  duration: number;
  diamondReward: number;
  experienceReward: number;
  levelRequired: number;
  endTime: number;
}

interface Inventory {
  artifacts: Artifact[];
  skins: Skin[];
  relics: Relic[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–∫–µ—Ä–∞
interface ClickerState {
  // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  selectedClass: ClassType | null;
  hasSelectedClass: boolean;
  level: number;
  experience: number;
  totalExperience: number;
  
  // –†–µ—Å—É—Ä—Å—ã
  clicks: number;
  totalClicks: number;
  diamonds: number;
  
  // –ü—Ä–µ—Å—Ç–∏–∂
  prestige: number;
  prestigeThreshold: number;
  canPrestige: boolean;
  showPrestigeWarning: boolean;
  
  // –£–ª—É—á—à–µ–Ω–∏—è
  clickPower: number;
  clickLevel: number;
  clickCost: number;
  
  autoClickPower: number;
  autoClickLevel: number;
  autoClickCost: number;
  
  autoClickSpeed: number;
  autoClickSpeedLevel: number;
  autoClickSpeedCost: number;
  
  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
  inventory: Inventory;
  
  // –≠–∫—Å–ø–µ–¥–∏—Ü–∏–∏
  expeditionSlots: number;
  activeExpeditions: Expedition[];
  
  // –ü–æ–¥–∑–µ–º–µ–ª—å—è
  dungeonsCleared: number;
  dungeonLevel: number;
  currentDungeon: any | null;
  
  // –ù–∞–≤—ã–∫–∏
  skillPoints: number;
  skills: Record<string, Skill>;
  
  // –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  selectClass: (classType: ClassType) => void;
  addClicks: (amount: number) => void;
  addClickFromAuto: () => void;
  addDiamonds: (amount: number) => void;
  spendDiamonds: (amount: number) => void;
  addExperience: (amount: number) => void;
  
  // –£–ª—É—á—à–µ–Ω–∏—è
  upgradeClickPower: () => void;
  upgradeAutoClickPower: () => void;
  upgradeAutoClickSpeed: () => void;
  canAffordUpgrade: (type: string) => boolean;
  
  // –ü—Ä–µ—Å—Ç–∏–∂
  performPrestige: () => void;
  setShowPrestigeWarning: (value: boolean) => void;
  
  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
  addItem: (item: any) => void;
  addRandomItem: (chest: any) => any[];
  
  // –≠–∫—Å–ø–µ–¥–∏—Ü–∏–∏
  startExpedition: (expedition: any) => void;
  completeExpedition: (expeditionId: string) => any;
  canStartExpedition: () => boolean;
  
  // –ü–æ–¥–∑–µ–º–µ–ª—å—è
  selectDungeon: (dungeonId: string) => void;
  startDungeon: (dungeonId: string) => void;
  clearDungeonLevel: () => void;
  exitDungeon: () => void;
  
  // –ù–∞–≤—ã–∫–∏
  upgradeSkill: (skillId: string) => void;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞
  saveGame: () => any;
  loadGame: (data: any) => void;
  resetGame: () => void;
}

export const useClicker = create<ClickerState>((set, get) => ({
  // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  selectedClass: null,
  hasSelectedClass: false,
  level: 1,
  experience: 0,
  totalExperience: 0,
  
  // –†–µ—Å—É—Ä—Å—ã
  clicks: 0,
  totalClicks: 0,
  diamonds: 0,
  
  // –ü—Ä–µ—Å—Ç–∏–∂
  prestige: 0,
  prestigeThreshold: 10000,
  canPrestige: false,
  showPrestigeWarning: true,
  
  // –£–ª—É—á—à–µ–Ω–∏—è
  clickPower: 1,
  clickLevel: 1,
  clickCost: 10,
  
  autoClickPower: 0,
  autoClickLevel: 0,
  autoClickCost: 100,
  
  autoClickSpeed: 1000,
  autoClickSpeedLevel: 0,
  autoClickSpeedCost: 5,
  
  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
  inventory: {
    artifacts: [],
    skins: [],
    relics: []
  },
  
  // –≠–∫—Å–ø–µ–¥–∏—Ü–∏–∏
  expeditionSlots: 2,
  activeExpeditions: [],
  
  // –ü–æ–¥–∑–µ–º–µ–ª—å—è
  dungeonsCleared: 0,
  dungeonLevel: 1,
  currentDungeon: null,
  
  // –ù–∞–≤—ã–∫–∏
  skillPoints: 0,
  skills: {
    clickEfficiency: {
      name: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞",
      description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–∫–∞",
      icon: "üëÜ",
      level: 0,
      maxLevel: 10,
      getCurrentBonus: function() {
        return `+${this.level * 5}% –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞`;
      },
      getNextBonus: function() {
        return `+${(this.level + 1) * 5}% –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞`;
      }
    },
    autoClickEfficiency: {
      name: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–∞",
      description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∞–≤—Ç–æ–∫–ª–∏–∫–∞",
      icon: "‚ö°",
      level: 0,
      maxLevel: 10,
      getCurrentBonus: function() {
        return `+${this.level * 10}% –∫ —Å–∏–ª–µ –∞–≤—Ç–æ–∫–ª–∏–∫–∞`;
      },
      getNextBonus: function() {
        return `+${(this.level + 1) * 10}% –∫ —Å–∏–ª–µ –∞–≤—Ç–æ–∫–ª–∏–∫–∞`;
      }
    },
    diamondFinder: {
      name: "–ü–æ–∏—Å–∫ –∞–ª–º–∞–∑–æ–≤",
      description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö –∞–ª–º–∞–∑–æ–≤",
      icon: "üíé",
      level: 0,
      maxLevel: 10,
      getCurrentBonus: function() {
        return `+${this.level * 5}% –∫ –ø–æ–ª—É—á–∞–µ–º—ã–º –∞–ª–º–∞–∑–∞–º`;
      },
      getNextBonus: function() {
        return `+${(this.level + 1) * 5}% –∫ –ø–æ–ª—É—á–∞–µ–º—ã–º –∞–ª–º–∞–∑–∞–º`;
      }
    },
    expeditionMaster: {
      name: "–ú–∞—Å—Ç–µ—Ä —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π",
      description: "–°–æ–∫—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π",
      icon: "üß≠",
      level: 0,
      maxLevel: 5,
      getCurrentBonus: function() {
        return `${this.level * 5}% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π`;
      },
      getNextBonus: function() {
        return `${(this.level + 1) * 5}% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π`;
      }
    },
    dungeonFighter: {
      name: "–ë–æ–µ—Ü –ø–æ–¥–∑–µ–º–µ–ª–∏–π",
      description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –≤ –ø–æ–¥–∑–µ–º–µ–ª—å—è—Ö",
      icon: "üè∞",
      level: 0,
      maxLevel: 10,
      getCurrentBonus: function() {
        return `+${this.level * 10}% –∫ —É—Ä–æ–Ω—É –≤ –ø–æ–¥–∑–µ–º–µ–ª—å—è—Ö`;
      },
      getNextBonus: function() {
        return `+${(this.level + 1) * 10}% –∫ —É—Ä–æ–Ω—É –≤ –ø–æ–¥–∑–µ–º–µ–ª—å—è—Ö`;
      }
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  selectClass: (classType) => {
    console.log("useClicker.selectClass –≤—ã–∑–≤–∞–Ω —Å –∫–ª–∞—Å—Å–æ–º:", classType);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    let newClickPower = 1; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    let newDiamonds = 0;   // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    switch (classType) {
      case "warrior":
        console.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –≤–æ–∏–Ω–∞");
        // –í–æ–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç +5 –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–ª–µ –∫–ª–∏–∫–∞
        newClickPower += 5;
        break;
      case "explorer":
        console.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è");
        // –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–µ–π
        // (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
        break;
      case "merchant":
        console.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞");
        // –¢–æ—Ä–≥–æ–≤–µ—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç —Å +50 –∞–ª–º–∞–∑–∞–º–∏
        newDiamonds = 50;
        break;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    set({
      selectedClass: classType,
      hasSelectedClass: true,
      clickPower: newClickPower,
      diamonds: newDiamonds
    });
    
    console.log("useClicker.selectClass: –∫–ª–∞—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", 
      useClicker.getState().selectedClass, 
      useClicker.getState().hasSelectedClass
    );
  },
  
  addClicks: (amount) => {
    set((state) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
      let multiplier = 1;
      if (state.selectedClass === "warrior") {
        multiplier += 0.25; // +25% –¥–ª—è –≤–æ–∏–Ω–∞
      }
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
      const skillBonus = state.skills.clickEfficiency.level * 0.05; // +5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
      multiplier += skillBonus;
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Ä–µ–ª–∏–∫–≤–∏–π
      state.inventory.relics.forEach(relic => {
        if (relic.bonus.type === "clickPower") {
          multiplier += relic.bonus.value;
        }
      });
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
      state.inventory.artifacts.forEach(artifact => {
        if (artifact.bonus.type === "clickPower") {
          multiplier += artifact.bonus.value;
        }
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
      const adjustedAmount = Math.round(amount * multiplier);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
      const newClicks = state.clicks + adjustedAmount;
      const newTotalClicks = state.totalClicks + adjustedAmount;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ—Å—Ç–∏–∂–∞
      const canPrestige = newClicks >= state.prestigeThreshold;
      
      return {
        clicks: newClicks,
        totalClicks: newTotalClicks,
        canPrestige
      };
    });
  },
  
  addClickFromAuto: () => {
    const state = get();
    if (state.autoClickPower <= 0) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
    let multiplier = 1;
    const skillBonus = state.skills.autoClickEfficiency.level * 0.1; // +10% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    multiplier += skillBonus;
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Ä–µ–ª–∏–∫–≤–∏–π
    state.inventory.relics.forEach(relic => {
      if (relic.bonus.type === "autoClickPower") {
        multiplier += relic.bonus.value;
      }
    });
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    state.inventory.artifacts.forEach(artifact => {
      if (artifact.bonus.type === "autoClickPower") {
        multiplier += artifact.bonus.value;
      }
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
    const adjustedAmount = Math.round(state.autoClickPower * multiplier);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∏
    set((state) => {
      const newClicks = state.clicks + adjustedAmount;
      const newTotalClicks = state.totalClicks + adjustedAmount;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ—Å—Ç–∏–∂–∞
      const canPrestige = newClicks >= state.prestigeThreshold;
      
      return {
        clicks: newClicks,
        totalClicks: newTotalClicks,
        canPrestige
      };
    });
  },
  
  addDiamonds: (amount) => {
    set((state) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
      let multiplier = 1;
      if (state.selectedClass === "merchant") {
        multiplier += 0.1; // +10% –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
      }
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
      const skillBonus = state.skills.diamondFinder.level * 0.05; // +5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
      multiplier += skillBonus;
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Ä–µ–ª–∏–∫–≤–∏–π
      state.inventory.relics.forEach(relic => {
        if (relic.bonus.type === "diamondGain") {
          multiplier += relic.bonus.value;
        }
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
      const adjustedAmount = Math.round(amount * multiplier);
      
      return { diamonds: state.diamonds + adjustedAmount };
    });
  },
  
  spendDiamonds: (amount) => {
    set((state) => {
      if (state.diamonds < amount) return {};
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
      let discount = 0;
      if (state.selectedClass === "merchant") {
        discount = 0.15; // -15% –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
      }
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Ä–µ–ª–∏–∫–≤–∏–π
      state.inventory.relics.forEach(relic => {
        if (relic.bonus.type === "shopDiscount") {
          discount += relic.bonus.value;
        }
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É (–º–∞–∫—Å–∏–º—É–º 50%)
      const adjustedAmount = Math.round(amount * (1 - Math.min(0.5, discount)));
      
      return { diamonds: state.diamonds - adjustedAmount };
    });
  },
  
  addExperience: (amount) => {
    set((state) => {
      const totalExp = state.experience + amount;
      const expForNextLevel = state.level * 100;
      
      // –ï—Å–ª–∏ –æ–ø—ã—Ç –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      if (totalExp >= expForNextLevel) {
        const remainingExp = totalExp - expForNextLevel;
        return {
          level: state.level + 1,
          experience: remainingExp,
          totalExperience: state.totalExperience + amount,
          skillPoints: state.skillPoints + 1 // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–æ –Ω–∞–≤—ã–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        };
      }
      
      return {
        experience: totalExp,
        totalExperience: state.totalExperience + amount
      };
    });
  },
  
  // –£–ª—É—á—à–µ–Ω–∏—è
  upgradeClickPower: () => {
    set((state) => {
      if (state.clicks < state.clickCost) return {};
      
      const newLevel = state.clickLevel + 1;
      const newClickPower = Math.ceil(state.clickPower * 1.2); // +20% –∫ —Å–∏–ª–µ
      const newCost = Math.ceil(state.clickCost * 1.5); // +50% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      
      return {
        clicks: state.clicks - state.clickCost,
        clickLevel: newLevel,
        clickPower: newClickPower,
        clickCost: newCost
      };
    });
  },
  
  upgradeAutoClickPower: () => {
    set((state) => {
      if (state.clicks < state.autoClickCost) return {};
      
      const newLevel = state.autoClickLevel + 1;
      let newAutoClickPower = state.autoClickLevel === 0 ? 1 : Math.ceil(state.autoClickPower * 1.3); // –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å = 1, –∑–∞—Ç–µ–º +30%
      const newCost = Math.ceil(state.autoClickCost * 1.8); // +80% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      
      return {
        clicks: state.clicks - state.autoClickCost,
        autoClickLevel: newLevel,
        autoClickPower: newAutoClickPower,
        autoClickCost: newCost
      };
    });
  },
  
  upgradeAutoClickSpeed: () => {
    set((state) => {
      if (state.diamonds < state.autoClickSpeedCost) return {};
      
      const newLevel = state.autoClickSpeedLevel + 1;
      // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 100–º—Å
      const newSpeed = Math.max(100, state.autoClickSpeed - Math.ceil(state.autoClickSpeed * 0.1)); // -10% –∫ –≤—Ä–µ–º–µ–Ω–∏
      const newCost = Math.ceil(state.autoClickSpeedCost * 1.5); // +50% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      
      return {
        diamonds: state.diamonds - state.autoClickSpeedCost,
        autoClickSpeedLevel: newLevel,
        autoClickSpeed: newSpeed,
        autoClickSpeedCost: newCost
      };
    });
  },
  
  canAffordUpgrade: (type) => {
    const state = get();
    switch (type) {
      case "click":
        return state.clicks >= state.clickCost;
      case "autoClick":
        return state.clicks >= state.autoClickCost;
      case "autoClickSpeed":
        return state.diamonds >= state.autoClickSpeedCost;
      default:
        return false;
    }
  },
  
  // –ü—Ä–µ—Å—Ç–∏–∂
  performPrestige: () => {
    set((state) => {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –ø—Ä–µ—Å—Ç–∏–∂–∞ –Ω–∞ 50%
      const newPrestigeThreshold = Math.ceil(state.prestigeThreshold * 1.5);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞
      const prestigeBonus = Math.max(1, Math.floor(Math.sqrt(state.prestige + 1) * 2));
      
      return {
        prestige: state.prestige + 1,
        prestigeThreshold: newPrestigeThreshold,
        clicks: 0,
        clickLevel: 1,
        clickPower: 1 + prestigeBonus, // –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ + –±–æ–Ω—É—Å –ø—Ä–µ—Å—Ç–∏–∂–∞
        clickCost: 10,
        autoClickPower: 0,
        autoClickLevel: 0,
        autoClickCost: 100,
        autoClickSpeed: 1000,
        autoClickSpeedLevel: 0,
        autoClickSpeedCost: 5,
        canPrestige: false,
        showPrestigeWarning: true
      };
    });
  },
  
  setShowPrestigeWarning: (value) => {
    set({ showPrestigeWarning: value });
  },
  
  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
  addItem: (item) => {
    set((state) => {
      const inventory = { ...state.inventory };
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç
      if ('effects' in item) {
        // –≠—Ç–æ —Ä–µ–ª–∏–∫–≤–∏—è
        if (!inventory.relics.some(relic => relic.id === item.id)) {
          inventory.relics = [...inventory.relics, item];
        }
      } else if ('bonus' in item) {
        // –≠—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        if (!inventory.artifacts.some(artifact => artifact.id === item.id)) {
          inventory.artifacts = [...inventory.artifacts, item];
        }
      } else {
        // –≠—Ç–æ —Å–∫–∏–Ω
        if (!inventory.skins.some(skin => skin.id === item.id)) {
          inventory.skins = [...inventory.skins, item];
        }
      }
      
      return { inventory };
    });
  },
  
  addRandomItem: (chest) => {
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å—É–Ω–¥—É–∫–∞ —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫
    const chestCopy = { ...chest };
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
    const state = get();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–∞—á–∏ (–¥–ª—è –∫–ª–∞—Å—Å–∞ —Ç–æ—Ä–≥–æ–≤—Ü–∞)
    let luckModifier = state.selectedClass === "merchant" ? 0.1 : 0; // +10% –∫ —É–¥–∞—á–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Ä–µ–ª–∏–∫–≤–∏–π
    state.inventory.relics.forEach(relic => {
      if (relic.bonus.type === "luck") {
        luckModifier += relic.bonus.value;
      }
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å—É–Ω–¥—É–∫–µ
    const itemCount = Math.floor(Math.random() * 3) + 1; // 1-3 –ø—Ä–µ–¥–º–µ—Ç–∞
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, —Å–∫–∏–Ω—ã –∏ —Ç.–¥.
    const allArtifacts = artifacts.filter(a => a.chestType === chestCopy.category);
    const allSkins = skins.filter(s => s.chestType === chestCopy.category);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    const getRandomItem = () => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      const artifactChance = 0.7; // 70% –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, 30% —Å–∫–∏–Ω
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞—á—É
      const adjustedArtifactChance = artifactChance - luckModifier;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
      const itemType = Math.random() < adjustedArtifactChance ? 'artifact' : 'skin';
      
      // –î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
      const rarityRoll = Math.random();
      let rarityTarget: string;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞—á—É –∫ —à–∞–Ω—Å—É —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      if (rarityRoll < (0.01 + luckModifier)) {
        rarityTarget = 'mythic'; // 1% + —É–¥–∞—á–∞
      } else if (rarityRoll < (0.05 + luckModifier)) {
        rarityTarget = 'legendary'; // 4% + —É–¥–∞—á–∞
      } else if (rarityRoll < (0.15 + luckModifier)) {
        rarityTarget = 'epic'; // 10% + —É–¥–∞—á–∞
      } else if (rarityRoll < (0.35 + luckModifier)) {
        rarityTarget = 'rare'; // 20% + —É–¥–∞—á–∞
      } else if (rarityRoll < (0.65 + luckModifier)) {
        rarityTarget = 'uncommon'; // 30% + —É–¥–∞—á–∞
      } else {
        rarityTarget = 'common'; // 35% - —É–¥–∞—á–∞
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
      const itemPool = itemType === 'artifact' 
        ? allArtifacts.filter(item => item.rarity === rarityTarget)
        : allSkins.filter(item => item.rarity === rarityTarget);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
      const availablePool = itemPool.length > 0 
        ? itemPool 
        : (itemType === 'artifact' ? allArtifacts : allSkins);
      
      // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (availablePool.length === 0) return null;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
      return availablePool[Math.floor(Math.random() * availablePool.length)];
    };
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    const items = [];
    for (let i = 0; i < itemCount; i++) {
      const item = getRandomItem();
      if (item) {
        items.push(item);
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        get().addItem(item);
      }
    }
    
    return items;
  },
  
  // –≠–∫—Å–ø–µ–¥–∏—Ü–∏–∏
  startExpedition: (expedition) => {
    set((state) => {
      // –ö–æ–ø–∏—Ä—É–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é
      const newExpedition = { ...expedition };
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
      let timeModifier = state.selectedClass === "explorer" ? 0.8 : 1; // -20% –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≤—ã–∫ –º–∞—Å—Ç–µ—Ä–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
      timeModifier -= state.skills.expeditionMaster.level * 0.05; // -5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä 0.5 (-50%)
      timeModifier = Math.max(0.5, timeModifier);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
      const adjustedDuration = Math.ceil(newExpedition.duration * timeModifier);
      newExpedition.endTime = Date.now() + adjustedDuration;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
      if (state.selectedClass === "explorer") {
        newExpedition.diamondReward = Math.ceil(newExpedition.diamondReward * 1.15); // +15%
        newExpedition.experienceReward = Math.ceil(newExpedition.experienceReward * 1.15); // +15%
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
      return {
        activeExpeditions: [...state.activeExpeditions, newExpedition]
      };
    });
  },
  
  completeExpedition: (expeditionId) => {
    const state = get();
    
    // –ò—â–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    const expeditionIndex = state.activeExpeditions.findIndex(e => e.id === expeditionId);
    if (expeditionIndex === -1) return null;
    
    const expedition = state.activeExpeditions[expeditionIndex];
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const diamonds = expedition.diamondReward;
    const experience = expedition.experienceReward;
    
    // –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (20%)
    let items: any[] = [];
    if (Math.random() < 0.2) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
      const availableArtifacts = artifacts.filter(a => 
        a.levelRequired <= state.level && 
        !state.inventory.artifacts.some(inv => inv.id === a.id)
      );
      
      if (availableArtifacts.length > 0) {
        const item = availableArtifacts[Math.floor(Math.random() * availableArtifacts.length)];
        items.push(item);
        state.addItem(item);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–º–∞–∑—ã –∏ –æ–ø—ã—Ç
    state.addDiamonds(diamonds);
    state.addExperience(experience);
    
    // –£–¥–∞–ª—è–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    set((state) => ({
      activeExpeditions: state.activeExpeditions.filter(e => e.id !== expeditionId)
    }));
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    return {
      expedition,
      diamonds,
      experience,
      items
    };
  },
  
  canStartExpedition: () => {
    const state = get();
    return state.activeExpeditions.length < state.expeditionSlots;
  },
  
  // –ü–æ–¥–∑–µ–º–µ–ª—å—è
  selectDungeon: (dungeonId) => {
    return { currentDungeon: null }; // –ü—Ä–æ—Å—Ç–æ –¥–ª—è –≤—ã–±–æ—Ä–∞, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ startDungeon
  },
  
  startDungeon: (dungeonId) => {
    set((state) => {
      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
      const dungeon = expeditions.find(d => d.id === dungeonId);
      if (!dungeon) return {};
      
      return {
        currentDungeon: dungeon,
        dungeonLevel: 1
      };
    });
  },
  
  clearDungeonLevel: () => {
    set((state) => {
      return {
        dungeonLevel: state.dungeonLevel + 1
      };
    });
  },
  
  exitDungeon: () => {
    set((state) => {
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ —Ö–æ—Ç—è –±—ã 10 —É—Ä–æ–≤–Ω–µ–π, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
      if (state.dungeonLevel >= 10) {
        return {
          currentDungeon: null,
          dungeonLevel: 1,
          dungeonsCleared: state.dungeonsCleared + 1
        };
      }
      
      return {
        currentDungeon: null,
        dungeonLevel: 1
      };
    });
  },
  
  // –ù–∞–≤—ã–∫–∏
  upgradeSkill: (skillId) => {
    set((state) => {
      if (state.skillPoints <= 0) return {};
      
      const skills = { ...state.skills };
      const skill = skills[skillId];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤—ã–∫ –Ω–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º—É–º–∞
      if (skill.level >= skill.maxLevel) return {};
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞
      skill.level += 1;
      
      return {
        skills,
        skillPoints: state.skillPoints - 1
      };
    });
  },
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞
  saveGame: () => {
    const state = get();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    return {
      selectedClass: state.selectedClass,
      level: state.level,
      experience: state.experience,
      totalExperience: state.totalExperience,
      clicks: state.clicks,
      totalClicks: state.totalClicks,
      diamonds: state.diamonds,
      prestige: state.prestige,
      prestigeThreshold: state.prestigeThreshold,
      clickPower: state.clickPower,
      clickLevel: state.clickLevel,
      clickCost: state.clickCost,
      autoClickPower: state.autoClickPower,
      autoClickLevel: state.autoClickLevel,
      autoClickCost: state.autoClickCost,
      autoClickSpeed: state.autoClickSpeed,
      autoClickSpeedLevel: state.autoClickSpeedLevel,
      autoClickSpeedCost: state.autoClickSpeedCost,
      inventory: state.inventory,
      expeditionSlots: state.expeditionSlots,
      activeExpeditions: state.activeExpeditions,
      dungeonsCleared: state.dungeonsCleared,
      skillPoints: state.skillPoints,
      skills: state.skills
    };
  },
  
  loadGame: (data) => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    set((state) => ({
      ...state,
      ...data,
      hasSelectedClass: !!data.selectedClass
    }));
  },
  
  resetGame: () => {
    localStorage.removeItem("clickerGameSave");
    set((state) => ({
      selectedClass: null,
      hasSelectedClass: false,
      level: 1,
      experience: 0,
      totalExperience: 0,
      clicks: 0,
      totalClicks: 0,
      diamonds: 0,
      prestige: 0,
      prestigeThreshold: 10000,
      canPrestige: false,
      showPrestigeWarning: true,
      clickPower: 1,
      clickLevel: 1,
      clickCost: 10,
      autoClickPower: 0,
      autoClickLevel: 0,
      autoClickCost: 100,
      autoClickSpeed: 1000,
      autoClickSpeedLevel: 0,
      autoClickSpeedCost: 5,
      inventory: {
        artifacts: [],
        skins: [],
        relics: []
      },
      expeditionSlots: 2,
      activeExpeditions: [],
      dungeonsCleared: 0,
      dungeonLevel: 1,
      currentDungeon: null,
      skillPoints: 0,
      skills: {
        ...state.skills,
        clickEfficiency: {
          ...state.skills.clickEfficiency,
          level: 0
        },
        autoClickEfficiency: {
          ...state.skills.autoClickEfficiency,
          level: 0
        },
        diamondFinder: {
          ...state.skills.diamondFinder,
          level: 0
        },
        expeditionMaster: {
          ...state.skills.expeditionMaster,
          level: 0
        },
        dungeonFighter: {
          ...state.skills.dungeonFighter,
          level: 0
        }
      }
    }));
  }
}));
